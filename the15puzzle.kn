{{{
	15パズル for Kuin 1.00
	Last Modified: 2013/10/26 11:14:06.

	作成:
		Tatt (@tatt61880)
		https://twitter.com/tatt61880
}}}

const PieceSize: float :: 100.0
const FontSize: int :: 72
const FontName: []char :: "mplus-1m-regular.ttf"

var Font: Draw@CFont

class Piece()
	var id: int
	var num: int
	var pos: int
	var tex: Draw@CTex
	func Init(id: int): @Piece
		do this.id :: id
		do this.num :: id + 1
		do this.pos :: id
		do this.tex :: @Font.MakeTex(@FontSize, this.num.ToStr(), 3)
		return this
	end func
end class
var Pieces: []@Piece
var VoidPiece: @Piece

{駒の位置情報を元にその駒のidを返します}
func FindPieceID(pos: int): int
	foreach p(@Pieces)
		if(p.pos = pos)
			return p.id
		end if
	end foreach
	do Dbg@Log("駒が見つかりません。これはおかしいです。")
	assert false
end func

func Init(cfg: Kuin@CCfg)
	do cfg.Title :: "THE 15 PUZZLE"
end func

func Main()
	{フォントの初期化}
	do @Font :: Draw@LoadFont(@FontName)
	{駒の初期化}
	do @Pieces :: #[16]@Piece
	for i(0, 15)
		{do pieces[i].pos :: i {←インスタンス(#piece)を作成せずにメンバ変数(posに代入すると実行時エラーになります)}}
		do @Pieces[i] :: (#@Piece).Init(i)
	end for
	do @VoidPiece :: @Pieces[15]

	while()
		do Kuin@Act()
		do movePieces()
		do drawPieces()
	end while

	func drawPieces()
		foreach p(@Pieces)
			if(p <>& @VoidPiece)
				var x: float :: @PieceSize * (p.pos % 4)$ float
				var y: float :: @PieceSize * (p.pos / 4)$ float
				do Draw@Rect(x + 2.0, y + 2.0, @PieceSize - 4.0, @PieceSize - 4.0, 1.0, 1.0, 1.0, 1.0)
				do p.tex.Draw(0.0, 0.0, p.tex.Width(), p.tex.Height(), x + (@PieceSize - p.tex.Width()) / 2.0, y, 0.0, 0.0, 1.0, 1.0)
			end if
		end foreach
	end func

	func movePieces()
		if(Input@Pad(0, Input@EBtn#Right) = 1)
			if(@VoidPiece.pos % 4 <> 0)
				do @VoidPiece.pos :$ @Pieces[@FindPieceID(@VoidPiece.pos - 1)].pos
			end if
		end if
	end func
end func
